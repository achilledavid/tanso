generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  email          String           @unique
  firstname      String           @default("")
  lastname       String           @default("")
  avatarUrl      String?
  createdAt      DateTime         @default(now())
  Projects       Project[]
  UserKeyBinding UserKeyBinding[]

  @@map("users")
}

model Project {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique @default(uuid())
  name             String
  description      String             @default("")
  createdAt        DateTime           @default(now())
  userId           Int
  isPublic         Boolean            @default(false)
  AccessAuthorized AccessAuthorized[]
  Pads             Pad[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Pad {
  id          Int     @id @default(autoincrement())
  url         String?
  volume      Float   @default(1)
  fileName    String?
  keyBinding  String?
  projectUuid String
  isLooped    Boolean @default(false)
  project     Project @relation(fields: [projectUuid], references: [uuid], onDelete: Cascade)

  @@map("pads")
}

model AccessAuthorized {
  id          Int      @id @default(autoincrement())
  userEmail   String
  projectUuid String
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectUuid], references: [uuid], onDelete: Cascade)

  @@unique([userEmail, projectUuid])
  @@map("access_authorized")
}

model UserKeyBinding {
  id          Int      @id @default(autoincrement())
  userId      Int
  padPosition Int
  keyBinding  String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_keybinding")
}

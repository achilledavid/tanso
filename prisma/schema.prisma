generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  avatarUrl  String?
  createdAt  DateTime  @default(now())
  profile    UserProfile?
  sessions   SessionUser[]
  recordings UserRecording[]
  sounds     Sound[]
  presets    Preset[]

  @@map("users")
}

model UserProfile {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  language                 String   @default("en")
  theme                    String   @default("dark")
  defaultBpm               Int      @default(120)
  metronomeEnabled         Boolean  @default(true)
  tutorialSeen             Boolean  @default(false)
  volumeDefault            Float    @default(1.0)
  notificationsEnabled     Boolean  @default(true)
  keyboardShortcutsEnabled Boolean  @default(true)
  autoSaveEnabled          Boolean  @default(true)
  preferredPadSize         Int      @default(4)
  user                     User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

// Session models
model Session {
  id        Int           @id @default(autoincrement())
  name      String
  createdBy Int
  createdAt DateTime      @default(now())
  isActive  Boolean       @default(true)
  bpm       Int          @default(120)
  maxUsers  Int          @default(4)
  users     SessionUser[]
  pads      Pad[]
  recordings SessionRecording[]

  @@map("sessions")
}

model SessionUser {
  sessionId Int
  userId    Int
  joinedAt  DateTime @default(now())
  role      String   @default("player")
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([sessionId, userId])
  @@map("session_users")
}

model SessionRecording {
  id         Int      @id @default(autoincrement())
  sessionId  Int
  recordedBy Int
  audioUrl   String
  recordedAt DateTime @default(now())
  duration   Int
  session    Session  @relation(fields: [sessionId], references: [id])
  userRecordings UserRecording[]

  @@map("session_recordings")
}

// Pad models
model Pad {
  id        Int       @id @default(autoincrement())
  nbKey     Int
  name      String
  sessionId Int
  volume    Float     @default(1.0)
  color     String
  createdBy Int
  session   Session   @relation(fields: [sessionId], references: [id])
  keys      PadKey[]
  presetPads PresetPad[]

  @@map("pads")
}

model PadKey {
  id        Int     @id @default(autoincrement())
  padId     Int
  positionX Int
  positionY Int
  type      String
  color     String
  pad       Pad     @relation(fields: [padId], references: [id])
  sounds    KeySound[]

  @@map("pad_keys")
}

// Sound models
model Sound {
  id        Int        @id @default(autoincrement())
  name      String
  url       String
  createdBy Int
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [createdBy], references: [id])
  keySounds KeySound[]

  @@map("sounds")
}

model KeySound {
  keyId     Int
  soundId   Int
  volume    Float     @default(1.0)
  key       PadKey    @relation(fields: [keyId], references: [id])
  sound     Sound     @relation(fields: [soundId], references: [id])
  effects   Json?

  @@id([keyId, soundId])
  @@map("key_sounds")
}

// Preset models
model Preset {
  id          Int         @id @default(autoincrement())
  name        String
  createdBy   Int
  bpm         Int        @default(120)
  background  String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [createdBy], references: [id])
  pads        PresetPad[]

  @@map("presets")
}

model PresetPad {
  presetId  Int
  padId     Int
  position  Int
  preset    Preset    @relation(fields: [presetId], references: [id])
  pad       Pad       @relation(fields: [padId], references: [id])

  @@id([presetId, padId])
  @@map("preset_pads")
}

// Recording models
model UserRecording {
  id          Int              @id @default(autoincrement())
  userId      Int
  recordingId Int
  name        String
  savedAt     DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  recording   SessionRecording @relation(fields: [recordingId], references: [id])

  @@map("user_recordings")
}
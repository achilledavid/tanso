generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  auth0Id    String          @unique
  username   String          @unique
  email      String          @unique
  avatarUrl  String?
  createdAt  DateTime        @default(now())
  presets    Preset[]
  sessions   SessionUser[]
  sounds     Sound[]
  profile    UserProfile?
  recordings UserRecording[]

  @@map("users")
}

model UserProfile {
  id                       Int     @id @default(autoincrement())
  userId                   Int     @unique
  language                 String  @default("en")
  theme                    String  @default("dark")
  defaultBpm               Int     @default(120)
  metronomeEnabled         Boolean @default(true)
  tutorialSeen             Boolean @default(false)
  volumeDefault            Float   @default(1.0)
  notificationsEnabled     Boolean @default(true)
  keyboardShortcutsEnabled Boolean @default(true)
  autoSaveEnabled          Boolean @default(true)
  preferredPadSize         Int     @default(4)
  user                     User    @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Session {
  id         Int                @id @default(autoincrement())
  name       String
  createdBy  Int
  createdAt  DateTime           @default(now())
  isActive   Boolean            @default(true)
  bpm        Int                @default(120)
  maxUsers   Int                @default(4)
  pads       Pad[]
  recordings SessionRecording[]
  users      SessionUser[]

  @@map("sessions")
}

model SessionUser {
  sessionId Int
  userId    Int
  joinedAt  DateTime @default(now())
  role      String   @default("player")
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([sessionId, userId])
  @@map("session_users")
}

model SessionRecording {
  id             Int             @id @default(autoincrement())
  sessionId      Int
  recordedBy     Int
  audioUrl       String
  recordedAt     DateTime        @default(now())
  duration       Int
  session        Session         @relation(fields: [sessionId], references: [id])
  userRecordings UserRecording[]

  @@map("session_recordings")
}

model Pad {
  id         Int         @id @default(autoincrement())
  nbKey      Int
  name       String
  sessionId  Int
  volume     Float       @default(1.0)
  color      String
  createdBy  Int
  keys       PadKey[]
  session    Session     @relation(fields: [sessionId], references: [id])
  presetPads PresetPad[]

  @@map("pads")
}

model PadKey {
  id        Int        @id @default(autoincrement())
  padId     Int
  positionX Int
  positionY Int
  type      String
  color     String
  sounds    KeySound[]
  pad       Pad        @relation(fields: [padId], references: [id])

  @@map("pad_keys")
}

model Sound {
  id        Int        @id @default(autoincrement())
  name      String
  url       String
  createdBy Int
  createdAt DateTime   @default(now())
  keySounds KeySound[]
  user      User       @relation(fields: [createdBy], references: [id])

  @@map("sounds")
}

model KeySound {
  keyId   Int
  soundId Int
  volume  Float  @default(1.0)
  effects Json?
  key     PadKey @relation(fields: [keyId], references: [id])
  sound   Sound  @relation(fields: [soundId], references: [id])

  @@id([keyId, soundId])
  @@map("key_sounds")
}

model Preset {
  id         Int         @id @default(autoincrement())
  name       String
  createdBy  Int
  bpm        Int         @default(120)
  background String?
  createdAt  DateTime    @default(now())
  pads       PresetPad[]
  user       User        @relation(fields: [createdBy], references: [id])

  @@map("presets")
}

model PresetPad {
  presetId Int
  padId    Int
  position Int
  pad      Pad    @relation(fields: [padId], references: [id])
  preset   Preset @relation(fields: [presetId], references: [id])

  @@id([presetId, padId])
  @@map("preset_pads")
}

model UserRecording {
  id          Int              @id @default(autoincrement())
  userId      Int
  recordingId Int
  name        String
  savedAt     DateTime         @default(now())
  recording   SessionRecording @relation(fields: [recordingId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@map("user_recordings")
}
